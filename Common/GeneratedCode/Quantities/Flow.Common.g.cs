//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart
    [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Flow : IQuantity
#else
    public partial struct Flow : IQuantity, IComparable, IComparable<Flow>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly FlowUnit? _unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public FlowUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        static Flow()
        {
            BaseDimensions = new BaseDimensions(3, 0, -1, 0, 0, 0, 0);
        }

        /// <summary>
        ///     Creates the quantity with the given value in the base unit CubicMeterPerSecond.
        /// </summary>
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public Flow(double cubicmeterspersecond)
        {
            _value = Convert.ToDouble(cubicmeterspersecond);
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public
#endif
        Flow(double numericValue, FlowUnit unit)
        {
            _value = numericValue;
            _unit = unit;
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit CubicMeterPerSecond.
        /// </summary>
        /// <param name="cubicmeterspersecond">Value assuming base unit CubicMeterPerSecond.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Flow(long cubicmeterspersecond) : this(Convert.ToDouble(cubicmeterspersecond), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit CubicMeterPerSecond.
        /// </summary>
        /// <param name="cubicmeterspersecond">Value assuming base unit CubicMeterPerSecond.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Flow(decimal cubicmeterspersecond) : this(Convert.ToDouble(cubicmeterspersecond), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Flow;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static FlowUnit BaseUnit => FlowUnit.CubicMeterPerSecond;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions
        {
            get;
        }

        /// <summary>
        ///     All units of measurement for the Flow quantity.
        /// </summary>
        public static FlowUnit[] Units { get; } = Enum.GetValues(typeof(FlowUnit)).Cast<FlowUnit>().Except(new FlowUnit[]{ FlowUnit.Undefined }).ToArray();

        /// <summary>
        ///     Get Flow in CentilitersPerMinute.
        /// </summary>
        public double CentilitersPerMinute => As(FlowUnit.CentilitersPerMinute);

        /// <summary>
        ///     Get Flow in CubicDecimetersPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicDecimetersPerMinute => As(FlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Get Flow in CubicFeetPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicFeetPerHour => As(FlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Get Flow in CubicFeetPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicFeetPerMinute => As(FlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Get Flow in CubicFeetPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicFeetPerSecond => As(FlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Get Flow in CubicMetersPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicMetersPerHour => As(FlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Get Flow in CubicMetersPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicMetersPerMinute => As(FlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Get Flow in CubicMetersPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicMetersPerSecond => As(FlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Get Flow in CubicYardsPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicYardsPerHour => As(FlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Get Flow in CubicYardsPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicYardsPerMinute => As(FlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Get Flow in CubicYardsPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicYardsPerSecond => As(FlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Get Flow in DecilitersPerMinute.
        /// </summary>
        public double DecilitersPerMinute => As(FlowUnit.DecilitersPerMinute);

        /// <summary>
        ///     Get Flow in KilolitersPerMinute.
        /// </summary>
        public double KilolitersPerMinute => As(FlowUnit.KilolitersPerMinute);

        /// <summary>
        ///     Get Flow in LitersPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double LitersPerHour => As(FlowUnit.LitersPerHour);

        /// <summary>
        ///     Get Flow in LitersPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double LitersPerMinute => As(FlowUnit.LitersPerMinute);

        /// <summary>
        ///     Get Flow in LitersPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double LitersPerSecond => As(FlowUnit.LitersPerSecond);

        /// <summary>
        ///     Get Flow in MicrolitersPerMinute.
        /// </summary>
        public double MicrolitersPerMinute => As(FlowUnit.MicrolitersPerMinute);

        /// <summary>
        ///     Get Flow in MillilitersPerMinute.
        /// </summary>
        public double MillilitersPerMinute => As(FlowUnit.MillilitersPerMinute);

        /// <summary>
        ///     Get Flow in MillionUsGallonsPerDay.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double MillionUsGallonsPerDay => As(FlowUnit.MillionUsGallonsPerDay);

        /// <summary>
        ///     Get Flow in NanolitersPerMinute.
        /// </summary>
        public double NanolitersPerMinute => As(FlowUnit.NanolitersPerMinute);

        /// <summary>
        ///     Get Flow in OilBarrelsPerDay.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double OilBarrelsPerDay => As(FlowUnit.OilBarrelsPerDay);

        /// <summary>
        ///     Get Flow in UsGallonsPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double UsGallonsPerHour => As(FlowUnit.UsGallonsPerHour);

        /// <summary>
        ///     Get Flow in UsGallonsPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double UsGallonsPerMinute => As(FlowUnit.UsGallonsPerMinute);

        /// <summary>
        ///     Get Flow in UsGallonsPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double UsGallonsPerSecond => As(FlowUnit.UsGallonsPerSecond);

        #endregion

        #region Static

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerSecond.
        /// </summary>
        public static Flow Zero => new Flow(0, BaseUnit);

        /// <summary>
        ///     Get Flow from CentilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCentilitersPerMinute(double centilitersperminute)
#else
        public static Flow FromCentilitersPerMinute(QuantityValue centilitersperminute)
#endif
        {
            double value = (double) centilitersperminute;
            return new Flow(value, FlowUnit.CentilitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from CubicDecimetersPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicDecimetersPerMinute(double cubicdecimetersperminute)
#else
        public static Flow FromCubicDecimetersPerMinute(QuantityValue cubicdecimetersperminute)
#endif
        {
            double value = (double) cubicdecimetersperminute;
            return new Flow(value, FlowUnit.CubicDecimeterPerMinute);
        }

        /// <summary>
        ///     Get Flow from CubicFeetPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicFeetPerHour(double cubicfeetperhour)
#else
        public static Flow FromCubicFeetPerHour(QuantityValue cubicfeetperhour)
#endif
        {
            double value = (double) cubicfeetperhour;
            return new Flow(value, FlowUnit.CubicFootPerHour);
        }

        /// <summary>
        ///     Get Flow from CubicFeetPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicFeetPerMinute(double cubicfeetperminute)
#else
        public static Flow FromCubicFeetPerMinute(QuantityValue cubicfeetperminute)
#endif
        {
            double value = (double) cubicfeetperminute;
            return new Flow(value, FlowUnit.CubicFootPerMinute);
        }

        /// <summary>
        ///     Get Flow from CubicFeetPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicFeetPerSecond(double cubicfeetpersecond)
#else
        public static Flow FromCubicFeetPerSecond(QuantityValue cubicfeetpersecond)
#endif
        {
            double value = (double) cubicfeetpersecond;
            return new Flow(value, FlowUnit.CubicFootPerSecond);
        }

        /// <summary>
        ///     Get Flow from CubicMetersPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicMetersPerHour(double cubicmetersperhour)
#else
        public static Flow FromCubicMetersPerHour(QuantityValue cubicmetersperhour)
#endif
        {
            double value = (double) cubicmetersperhour;
            return new Flow(value, FlowUnit.CubicMeterPerHour);
        }

        /// <summary>
        ///     Get Flow from CubicMetersPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicMetersPerMinute(double cubicmetersperminute)
#else
        public static Flow FromCubicMetersPerMinute(QuantityValue cubicmetersperminute)
#endif
        {
            double value = (double) cubicmetersperminute;
            return new Flow(value, FlowUnit.CubicMeterPerMinute);
        }

        /// <summary>
        ///     Get Flow from CubicMetersPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicMetersPerSecond(double cubicmeterspersecond)
#else
        public static Flow FromCubicMetersPerSecond(QuantityValue cubicmeterspersecond)
#endif
        {
            double value = (double) cubicmeterspersecond;
            return new Flow(value, FlowUnit.CubicMeterPerSecond);
        }

        /// <summary>
        ///     Get Flow from CubicYardsPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicYardsPerHour(double cubicyardsperhour)
#else
        public static Flow FromCubicYardsPerHour(QuantityValue cubicyardsperhour)
#endif
        {
            double value = (double) cubicyardsperhour;
            return new Flow(value, FlowUnit.CubicYardPerHour);
        }

        /// <summary>
        ///     Get Flow from CubicYardsPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicYardsPerMinute(double cubicyardsperminute)
#else
        public static Flow FromCubicYardsPerMinute(QuantityValue cubicyardsperminute)
#endif
        {
            double value = (double) cubicyardsperminute;
            return new Flow(value, FlowUnit.CubicYardPerMinute);
        }

        /// <summary>
        ///     Get Flow from CubicYardsPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicYardsPerSecond(double cubicyardspersecond)
#else
        public static Flow FromCubicYardsPerSecond(QuantityValue cubicyardspersecond)
#endif
        {
            double value = (double) cubicyardspersecond;
            return new Flow(value, FlowUnit.CubicYardPerSecond);
        }

        /// <summary>
        ///     Get Flow from DecilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromDecilitersPerMinute(double decilitersperminute)
#else
        public static Flow FromDecilitersPerMinute(QuantityValue decilitersperminute)
#endif
        {
            double value = (double) decilitersperminute;
            return new Flow(value, FlowUnit.DecilitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from KilolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromKilolitersPerMinute(double kilolitersperminute)
#else
        public static Flow FromKilolitersPerMinute(QuantityValue kilolitersperminute)
#endif
        {
            double value = (double) kilolitersperminute;
            return new Flow(value, FlowUnit.KilolitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from LitersPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromLitersPerHour(double litersperhour)
#else
        public static Flow FromLitersPerHour(QuantityValue litersperhour)
#endif
        {
            double value = (double) litersperhour;
            return new Flow(value, FlowUnit.LitersPerHour);
        }

        /// <summary>
        ///     Get Flow from LitersPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromLitersPerMinute(double litersperminute)
#else
        public static Flow FromLitersPerMinute(QuantityValue litersperminute)
#endif
        {
            double value = (double) litersperminute;
            return new Flow(value, FlowUnit.LitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from LitersPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromLitersPerSecond(double literspersecond)
#else
        public static Flow FromLitersPerSecond(QuantityValue literspersecond)
#endif
        {
            double value = (double) literspersecond;
            return new Flow(value, FlowUnit.LitersPerSecond);
        }

        /// <summary>
        ///     Get Flow from MicrolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromMicrolitersPerMinute(double microlitersperminute)
#else
        public static Flow FromMicrolitersPerMinute(QuantityValue microlitersperminute)
#endif
        {
            double value = (double) microlitersperminute;
            return new Flow(value, FlowUnit.MicrolitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from MillilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromMillilitersPerMinute(double millilitersperminute)
#else
        public static Flow FromMillilitersPerMinute(QuantityValue millilitersperminute)
#endif
        {
            double value = (double) millilitersperminute;
            return new Flow(value, FlowUnit.MillilitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from MillionUsGallonsPerDay.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromMillionUsGallonsPerDay(double millionusgallonsperday)
#else
        public static Flow FromMillionUsGallonsPerDay(QuantityValue millionusgallonsperday)
#endif
        {
            double value = (double) millionusgallonsperday;
            return new Flow(value, FlowUnit.MillionUsGallonsPerDay);
        }

        /// <summary>
        ///     Get Flow from NanolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromNanolitersPerMinute(double nanolitersperminute)
#else
        public static Flow FromNanolitersPerMinute(QuantityValue nanolitersperminute)
#endif
        {
            double value = (double) nanolitersperminute;
            return new Flow(value, FlowUnit.NanolitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from OilBarrelsPerDay.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromOilBarrelsPerDay(double oilbarrelsperday)
#else
        public static Flow FromOilBarrelsPerDay(QuantityValue oilbarrelsperday)
#endif
        {
            double value = (double) oilbarrelsperday;
            return new Flow(value, FlowUnit.OilBarrelsPerDay);
        }

        /// <summary>
        ///     Get Flow from UsGallonsPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromUsGallonsPerHour(double usgallonsperhour)
#else
        public static Flow FromUsGallonsPerHour(QuantityValue usgallonsperhour)
#endif
        {
            double value = (double) usgallonsperhour;
            return new Flow(value, FlowUnit.UsGallonsPerHour);
        }

        /// <summary>
        ///     Get Flow from UsGallonsPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromUsGallonsPerMinute(double usgallonsperminute)
#else
        public static Flow FromUsGallonsPerMinute(QuantityValue usgallonsperminute)
#endif
        {
            double value = (double) usgallonsperminute;
            return new Flow(value, FlowUnit.UsGallonsPerMinute);
        }

        /// <summary>
        ///     Get Flow from UsGallonsPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromUsGallonsPerSecond(double usgallonspersecond)
#else
        public static Flow FromUsGallonsPerSecond(QuantityValue usgallonspersecond)
#endif
        {
            double value = (double) usgallonspersecond;
            return new Flow(value, FlowUnit.UsGallonsPerSecond);
        }


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="FlowUnit" /> to <see cref="Flow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Flow unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Flow From(double value, FlowUnit fromUnit)
#else
        public static Flow From(QuantityValue value, FlowUnit fromUnit)
#endif
        {
            return new Flow((double)value, fromUnit);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(FlowUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Flow)) throw new ArgumentException("Expected type Flow.", nameof(obj));

            return CompareTo((Flow)obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Flow other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(Flow, double, ComparisonType) to provide the max allowed absolute or relative error.")]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Flow))
                return false;

            var objQuantity = (Flow)obj;
            return _value.Equals(objQuantity.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Flow within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Flow other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Compare equality to another Flow by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        [Obsolete("Please use the Equals(Flow, double, ComparisonType) overload. This method will be removed in a future version.")]
        public bool Equals(Flow other, Flow maxError)
        {
            return Math.Abs(_value - other.AsBaseNumericType(this.Unit)) <= maxError.AsBaseNumericType(this.Unit);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Flow.</returns>
        public override int GetHashCode()
        {
            return new { type = typeof(Flow), Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(FlowUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Flow to another Flow with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Flow with the specified unit.</returns>
        public Flow ToUnit(FlowUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Flow(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case FlowUnit.CentilitersPerMinute: return (_value/60000.00000) * 1e-2d;
                case FlowUnit.CubicDecimeterPerMinute: return _value/60000.00000;
                case FlowUnit.CubicFootPerHour: return _value*7.8657907199999087346816086183876e-6;
                case FlowUnit.CubicFootPerMinute: return _value/2118.88000326;
                case FlowUnit.CubicFootPerSecond: return _value/35.314666721;
                case FlowUnit.CubicMeterPerHour: return _value/3600;
                case FlowUnit.CubicMeterPerMinute: return _value/60;
                case FlowUnit.CubicMeterPerSecond: return _value;
                case FlowUnit.CubicYardPerHour: return _value*2.1237634944E-4;
                case FlowUnit.CubicYardPerMinute: return _value*0.0127425809664;
                case FlowUnit.CubicYardPerSecond: return _value*0.764554857984;
                case FlowUnit.DecilitersPerMinute: return (_value/60000.00000) * 1e-1d;
                case FlowUnit.KilolitersPerMinute: return (_value/60000.00000) * 1e3d;
                case FlowUnit.LitersPerHour: return _value/3600000.000;
                case FlowUnit.LitersPerMinute: return _value/60000.00000;
                case FlowUnit.LitersPerSecond: return _value/1000;
                case FlowUnit.MicrolitersPerMinute: return (_value/60000.00000) * 1e-6d;
                case FlowUnit.MillilitersPerMinute: return (_value/60000.00000) * 1e-3d;
                case FlowUnit.MillionUsGallonsPerDay: return _value/22.824465227;
                case FlowUnit.NanolitersPerMinute: return (_value/60000.00000) * 1e-9d;
                case FlowUnit.OilBarrelsPerDay: return _value*1.8401307283333333333333333333333e-6;
                case FlowUnit.UsGallonsPerHour: return _value/951019.38848933424;
                case FlowUnit.UsGallonsPerMinute: return _value/15850.323141489;
                case FlowUnit.UsGallonsPerSecond: return _value/264.1720523581484;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(FlowUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case FlowUnit.CentilitersPerMinute: return (baseUnitValue*60000.00000) / 1e-2d;
                case FlowUnit.CubicDecimeterPerMinute: return baseUnitValue*60000.00000;
                case FlowUnit.CubicFootPerHour: return baseUnitValue/7.8657907199999087346816086183876e-6;
                case FlowUnit.CubicFootPerMinute: return baseUnitValue*2118.88000326;
                case FlowUnit.CubicFootPerSecond: return baseUnitValue*35.314666721;
                case FlowUnit.CubicMeterPerHour: return baseUnitValue*3600;
                case FlowUnit.CubicMeterPerMinute: return baseUnitValue*60;
                case FlowUnit.CubicMeterPerSecond: return baseUnitValue;
                case FlowUnit.CubicYardPerHour: return baseUnitValue/2.1237634944E-4;
                case FlowUnit.CubicYardPerMinute: return baseUnitValue/0.0127425809664;
                case FlowUnit.CubicYardPerSecond: return baseUnitValue/0.764554857984;
                case FlowUnit.DecilitersPerMinute: return (baseUnitValue*60000.00000) / 1e-1d;
                case FlowUnit.KilolitersPerMinute: return (baseUnitValue*60000.00000) / 1e3d;
                case FlowUnit.LitersPerHour: return baseUnitValue*3600000.000;
                case FlowUnit.LitersPerMinute: return baseUnitValue*60000.00000;
                case FlowUnit.LitersPerSecond: return baseUnitValue*1000;
                case FlowUnit.MicrolitersPerMinute: return (baseUnitValue*60000.00000) / 1e-6d;
                case FlowUnit.MillilitersPerMinute: return (baseUnitValue*60000.00000) / 1e-3d;
                case FlowUnit.MillionUsGallonsPerDay: return baseUnitValue*22.824465227;
                case FlowUnit.NanolitersPerMinute: return (baseUnitValue*60000.00000) / 1e-9d;
                case FlowUnit.OilBarrelsPerDay: return baseUnitValue/1.8401307283333333333333333333333e-6;
                case FlowUnit.UsGallonsPerHour: return baseUnitValue*951019.38848933424;
                case FlowUnit.UsGallonsPerMinute: return baseUnitValue*15850.323141489;
                case FlowUnit.UsGallonsPerSecond: return baseUnitValue*264.1720523581484;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Flow Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Flow result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static FlowUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is CubicMeterPerSecond
        /// </summary>
        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        public static FlowUnit ToStringDefaultUnit { get; set; } = FlowUnit.CubicMeterPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(FlowUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        /// Represents the largest possible value of Flow
        /// </summary>
        public static Flow MaxValue => new Flow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Flow
        /// </summary>
        public static Flow MinValue => new Flow(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Flow.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Flow.BaseDimensions;
    }
}
