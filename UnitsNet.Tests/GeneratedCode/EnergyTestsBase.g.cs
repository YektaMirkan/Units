//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Energy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class EnergyTestsBase
    {
        protected abstract double BritishThermalUnitsInOneJoule { get; }
        protected abstract double CaloriesInOneJoule { get; }
        protected abstract double DecathermsEcInOneJoule { get; }
        protected abstract double DecathermsImperialInOneJoule { get; }
        protected abstract double DecathermsUsInOneJoule { get; }
        protected abstract double ElectronVoltsInOneJoule { get; }
        protected abstract double ErgsInOneJoule { get; }
        protected abstract double FootPoundsInOneJoule { get; }
        protected abstract double GigabritishThermalUnitsInOneJoule { get; }
        protected abstract double GigawattHoursInOneJoule { get; }
        protected abstract double JoulesInOneJoule { get; }
        protected abstract double KilobritishThermalUnitsInOneJoule { get; }
        protected abstract double KilocaloriesInOneJoule { get; }
        protected abstract double KilojoulesInOneJoule { get; }
        protected abstract double KilowattHoursInOneJoule { get; }
        protected abstract double MegabritishThermalUnitsInOneJoule { get; }
        protected abstract double MegajoulesInOneJoule { get; }
        protected abstract double MegawattHoursInOneJoule { get; }
        protected abstract double ThermsEcInOneJoule { get; }
        protected abstract double ThermsImperialInOneJoule { get; }
        protected abstract double ThermsUsInOneJoule { get; }
        protected abstract double WattHoursInOneJoule { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double CaloriesTolerance { get { return 1e-5; } }
        protected virtual double DecathermsEcTolerance { get { return 1e-5; } }
        protected virtual double DecathermsImperialTolerance { get { return 1e-5; } }
        protected virtual double DecathermsUsTolerance { get { return 1e-5; } }
        protected virtual double ElectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double ErgsTolerance { get { return 1e-5; } }
        protected virtual double FootPoundsTolerance { get { return 1e-5; } }
        protected virtual double GigabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursTolerance { get { return 1e-5; } }
        protected virtual double JoulesTolerance { get { return 1e-5; } }
        protected virtual double KilobritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursTolerance { get { return 1e-5; } }
        protected virtual double MegabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursTolerance { get { return 1e-5; } }
        protected virtual double ThermsEcTolerance { get { return 1e-5; } }
        protected virtual double ThermsImperialTolerance { get { return 1e-5; } }
        protected virtual double ThermsUsTolerance { get { return 1e-5; } }
        protected virtual double WattHoursTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void JouleToEnergyUnits()
        {
            Energy joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(BritishThermalUnitsInOneJoule, joule.BritishThermalUnits, BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(CaloriesInOneJoule, joule.Calories, CaloriesTolerance);
            AssertEx.EqualTolerance(DecathermsEcInOneJoule, joule.DecathermsEc, DecathermsEcTolerance);
            AssertEx.EqualTolerance(DecathermsImperialInOneJoule, joule.DecathermsImperial, DecathermsImperialTolerance);
            AssertEx.EqualTolerance(DecathermsUsInOneJoule, joule.DecathermsUs, DecathermsUsTolerance);
            AssertEx.EqualTolerance(ElectronVoltsInOneJoule, joule.ElectronVolts, ElectronVoltsTolerance);
            AssertEx.EqualTolerance(ErgsInOneJoule, joule.Ergs, ErgsTolerance);
            AssertEx.EqualTolerance(FootPoundsInOneJoule, joule.FootPounds, FootPoundsTolerance);
            AssertEx.EqualTolerance(GigabritishThermalUnitsInOneJoule, joule.GigabritishThermalUnits, GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(GigawattHoursInOneJoule, joule.GigawattHours, GigawattHoursTolerance);
            AssertEx.EqualTolerance(JoulesInOneJoule, joule.Joules, JoulesTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsInOneJoule, joule.KilobritishThermalUnits, KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(KilocaloriesInOneJoule, joule.Kilocalories, KilocaloriesTolerance);
            AssertEx.EqualTolerance(KilojoulesInOneJoule, joule.Kilojoules, KilojoulesTolerance);
            AssertEx.EqualTolerance(KilowattHoursInOneJoule, joule.KilowattHours, KilowattHoursTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsInOneJoule, joule.MegabritishThermalUnits, MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(MegajoulesInOneJoule, joule.Megajoules, MegajoulesTolerance);
            AssertEx.EqualTolerance(MegawattHoursInOneJoule, joule.MegawattHours, MegawattHoursTolerance);
            AssertEx.EqualTolerance(ThermsEcInOneJoule, joule.ThermsEc, ThermsEcTolerance);
            AssertEx.EqualTolerance(ThermsImperialInOneJoule, joule.ThermsImperial, ThermsImperialTolerance);
            AssertEx.EqualTolerance(ThermsUsInOneJoule, joule.ThermsUs, ThermsUsTolerance);
            AssertEx.EqualTolerance(WattHoursInOneJoule, joule.WattHours, WattHoursTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.BritishThermalUnit).BritishThermalUnits, BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Calorie).Calories, CaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.DecathermEc).DecathermsEc, DecathermsEcTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.DecathermImperial).DecathermsImperial, DecathermsImperialTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.DecathermUs).DecathermsUs, DecathermsUsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ElectronVolt).ElectronVolts, ElectronVoltsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Erg).Ergs, ErgsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.FootPound).FootPounds, FootPoundsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.GigabritishThermalUnit).GigabritishThermalUnits, GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.GigawattHour).GigawattHours, GigawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Joule).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.KilobritishThermalUnit).KilobritishThermalUnits, KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Kilocalorie).Kilocalories, KilocaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Kilojoule).Kilojoules, KilojoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.KilowattHour).KilowattHours, KilowattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.MegabritishThermalUnit).MegabritishThermalUnits, MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.Megajoule).Megajoules, MegajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.MegawattHour).MegawattHours, MegawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ThermEc).ThermsEc, ThermsEcTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ThermImperial).ThermsImperial, ThermsImperialTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.ThermUs).ThermsUs, ThermsUsTolerance);
            AssertEx.EqualTolerance(1, Energy.From(1, EnergyUnit.WattHour).WattHours, WattHoursTolerance);
        }

        [Fact]
        public void As()
        {
            var joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(BritishThermalUnitsInOneJoule, joule.As(EnergyUnit.BritishThermalUnit), BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(CaloriesInOneJoule, joule.As(EnergyUnit.Calorie), CaloriesTolerance);
            AssertEx.EqualTolerance(DecathermsEcInOneJoule, joule.As(EnergyUnit.DecathermEc), DecathermsEcTolerance);
            AssertEx.EqualTolerance(DecathermsImperialInOneJoule, joule.As(EnergyUnit.DecathermImperial), DecathermsImperialTolerance);
            AssertEx.EqualTolerance(DecathermsUsInOneJoule, joule.As(EnergyUnit.DecathermUs), DecathermsUsTolerance);
            AssertEx.EqualTolerance(ElectronVoltsInOneJoule, joule.As(EnergyUnit.ElectronVolt), ElectronVoltsTolerance);
            AssertEx.EqualTolerance(ErgsInOneJoule, joule.As(EnergyUnit.Erg), ErgsTolerance);
            AssertEx.EqualTolerance(FootPoundsInOneJoule, joule.As(EnergyUnit.FootPound), FootPoundsTolerance);
            AssertEx.EqualTolerance(GigabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.GigabritishThermalUnit), GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(GigawattHoursInOneJoule, joule.As(EnergyUnit.GigawattHour), GigawattHoursTolerance);
            AssertEx.EqualTolerance(JoulesInOneJoule, joule.As(EnergyUnit.Joule), JoulesTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsInOneJoule, joule.As(EnergyUnit.KilobritishThermalUnit), KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(KilocaloriesInOneJoule, joule.As(EnergyUnit.Kilocalorie), KilocaloriesTolerance);
            AssertEx.EqualTolerance(KilojoulesInOneJoule, joule.As(EnergyUnit.Kilojoule), KilojoulesTolerance);
            AssertEx.EqualTolerance(KilowattHoursInOneJoule, joule.As(EnergyUnit.KilowattHour), KilowattHoursTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.MegabritishThermalUnit), MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(MegajoulesInOneJoule, joule.As(EnergyUnit.Megajoule), MegajoulesTolerance);
            AssertEx.EqualTolerance(MegawattHoursInOneJoule, joule.As(EnergyUnit.MegawattHour), MegawattHoursTolerance);
            AssertEx.EqualTolerance(ThermsEcInOneJoule, joule.As(EnergyUnit.ThermEc), ThermsEcTolerance);
            AssertEx.EqualTolerance(ThermsImperialInOneJoule, joule.As(EnergyUnit.ThermImperial), ThermsImperialTolerance);
            AssertEx.EqualTolerance(ThermsUsInOneJoule, joule.As(EnergyUnit.ThermUs), ThermsUsTolerance);
            AssertEx.EqualTolerance(WattHoursInOneJoule, joule.As(EnergyUnit.WattHour), WattHoursTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var joule = Energy.FromJoules(1);

            var britishthermalunitQuantity = joule.ToUnit(EnergyUnit.BritishThermalUnit);
            AssertEx.EqualTolerance(BritishThermalUnitsInOneJoule, (double)britishthermalunitQuantity.Value, BritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.BritishThermalUnit, britishthermalunitQuantity.Unit);

            var calorieQuantity = joule.ToUnit(EnergyUnit.Calorie);
            AssertEx.EqualTolerance(CaloriesInOneJoule, (double)calorieQuantity.Value, CaloriesTolerance);
            Assert.Equal(EnergyUnit.Calorie, calorieQuantity.Unit);

            var decathermecQuantity = joule.ToUnit(EnergyUnit.DecathermEc);
            AssertEx.EqualTolerance(DecathermsEcInOneJoule, (double)decathermecQuantity.Value, DecathermsEcTolerance);
            Assert.Equal(EnergyUnit.DecathermEc, decathermecQuantity.Unit);

            var decathermimperialQuantity = joule.ToUnit(EnergyUnit.DecathermImperial);
            AssertEx.EqualTolerance(DecathermsImperialInOneJoule, (double)decathermimperialQuantity.Value, DecathermsImperialTolerance);
            Assert.Equal(EnergyUnit.DecathermImperial, decathermimperialQuantity.Unit);

            var decathermusQuantity = joule.ToUnit(EnergyUnit.DecathermUs);
            AssertEx.EqualTolerance(DecathermsUsInOneJoule, (double)decathermusQuantity.Value, DecathermsUsTolerance);
            Assert.Equal(EnergyUnit.DecathermUs, decathermusQuantity.Unit);

            var electronvoltQuantity = joule.ToUnit(EnergyUnit.ElectronVolt);
            AssertEx.EqualTolerance(ElectronVoltsInOneJoule, (double)electronvoltQuantity.Value, ElectronVoltsTolerance);
            Assert.Equal(EnergyUnit.ElectronVolt, electronvoltQuantity.Unit);

            var ergQuantity = joule.ToUnit(EnergyUnit.Erg);
            AssertEx.EqualTolerance(ErgsInOneJoule, (double)ergQuantity.Value, ErgsTolerance);
            Assert.Equal(EnergyUnit.Erg, ergQuantity.Unit);

            var footpoundQuantity = joule.ToUnit(EnergyUnit.FootPound);
            AssertEx.EqualTolerance(FootPoundsInOneJoule, (double)footpoundQuantity.Value, FootPoundsTolerance);
            Assert.Equal(EnergyUnit.FootPound, footpoundQuantity.Unit);

            var gigabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.GigabritishThermalUnit);
            AssertEx.EqualTolerance(GigabritishThermalUnitsInOneJoule, (double)gigabritishthermalunitQuantity.Value, GigabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.GigabritishThermalUnit, gigabritishthermalunitQuantity.Unit);

            var gigawatthourQuantity = joule.ToUnit(EnergyUnit.GigawattHour);
            AssertEx.EqualTolerance(GigawattHoursInOneJoule, (double)gigawatthourQuantity.Value, GigawattHoursTolerance);
            Assert.Equal(EnergyUnit.GigawattHour, gigawatthourQuantity.Unit);

            var jouleQuantity = joule.ToUnit(EnergyUnit.Joule);
            AssertEx.EqualTolerance(JoulesInOneJoule, (double)jouleQuantity.Value, JoulesTolerance);
            Assert.Equal(EnergyUnit.Joule, jouleQuantity.Unit);

            var kilobritishthermalunitQuantity = joule.ToUnit(EnergyUnit.KilobritishThermalUnit);
            AssertEx.EqualTolerance(KilobritishThermalUnitsInOneJoule, (double)kilobritishthermalunitQuantity.Value, KilobritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.KilobritishThermalUnit, kilobritishthermalunitQuantity.Unit);

            var kilocalorieQuantity = joule.ToUnit(EnergyUnit.Kilocalorie);
            AssertEx.EqualTolerance(KilocaloriesInOneJoule, (double)kilocalorieQuantity.Value, KilocaloriesTolerance);
            Assert.Equal(EnergyUnit.Kilocalorie, kilocalorieQuantity.Unit);

            var kilojouleQuantity = joule.ToUnit(EnergyUnit.Kilojoule);
            AssertEx.EqualTolerance(KilojoulesInOneJoule, (double)kilojouleQuantity.Value, KilojoulesTolerance);
            Assert.Equal(EnergyUnit.Kilojoule, kilojouleQuantity.Unit);

            var kilowatthourQuantity = joule.ToUnit(EnergyUnit.KilowattHour);
            AssertEx.EqualTolerance(KilowattHoursInOneJoule, (double)kilowatthourQuantity.Value, KilowattHoursTolerance);
            Assert.Equal(EnergyUnit.KilowattHour, kilowatthourQuantity.Unit);

            var megabritishthermalunitQuantity = joule.ToUnit(EnergyUnit.MegabritishThermalUnit);
            AssertEx.EqualTolerance(MegabritishThermalUnitsInOneJoule, (double)megabritishthermalunitQuantity.Value, MegabritishThermalUnitsTolerance);
            Assert.Equal(EnergyUnit.MegabritishThermalUnit, megabritishthermalunitQuantity.Unit);

            var megajouleQuantity = joule.ToUnit(EnergyUnit.Megajoule);
            AssertEx.EqualTolerance(MegajoulesInOneJoule, (double)megajouleQuantity.Value, MegajoulesTolerance);
            Assert.Equal(EnergyUnit.Megajoule, megajouleQuantity.Unit);

            var megawatthourQuantity = joule.ToUnit(EnergyUnit.MegawattHour);
            AssertEx.EqualTolerance(MegawattHoursInOneJoule, (double)megawatthourQuantity.Value, MegawattHoursTolerance);
            Assert.Equal(EnergyUnit.MegawattHour, megawatthourQuantity.Unit);

            var thermecQuantity = joule.ToUnit(EnergyUnit.ThermEc);
            AssertEx.EqualTolerance(ThermsEcInOneJoule, (double)thermecQuantity.Value, ThermsEcTolerance);
            Assert.Equal(EnergyUnit.ThermEc, thermecQuantity.Unit);

            var thermimperialQuantity = joule.ToUnit(EnergyUnit.ThermImperial);
            AssertEx.EqualTolerance(ThermsImperialInOneJoule, (double)thermimperialQuantity.Value, ThermsImperialTolerance);
            Assert.Equal(EnergyUnit.ThermImperial, thermimperialQuantity.Unit);

            var thermusQuantity = joule.ToUnit(EnergyUnit.ThermUs);
            AssertEx.EqualTolerance(ThermsUsInOneJoule, (double)thermusQuantity.Value, ThermsUsTolerance);
            Assert.Equal(EnergyUnit.ThermUs, thermusQuantity.Unit);

            var watthourQuantity = joule.ToUnit(EnergyUnit.WattHour);
            AssertEx.EqualTolerance(WattHoursInOneJoule, (double)watthourQuantity.Value, WattHoursTolerance);
            Assert.Equal(EnergyUnit.WattHour, watthourQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Energy joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(1, Energy.FromBritishThermalUnits(joule.BritishThermalUnits).Joules, BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromCalories(joule.Calories).Joules, CaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromDecathermsEc(joule.DecathermsEc).Joules, DecathermsEcTolerance);
            AssertEx.EqualTolerance(1, Energy.FromDecathermsImperial(joule.DecathermsImperial).Joules, DecathermsImperialTolerance);
            AssertEx.EqualTolerance(1, Energy.FromDecathermsUs(joule.DecathermsUs).Joules, DecathermsUsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromElectronVolts(joule.ElectronVolts).Joules, ElectronVoltsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromErgs(joule.Ergs).Joules, ErgsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromFootPounds(joule.FootPounds).Joules, FootPoundsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromGigabritishThermalUnits(joule.GigabritishThermalUnits).Joules, GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromGigawattHours(joule.GigawattHours).Joules, GigawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromJoules(joule.Joules).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilobritishThermalUnits(joule.KilobritishThermalUnits).Joules, KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilocalories(joule.Kilocalories).Joules, KilocaloriesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilojoules(joule.Kilojoules).Joules, KilojoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromKilowattHours(joule.KilowattHours).Joules, KilowattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegabritishThermalUnits(joule.MegabritishThermalUnits).Joules, MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegajoules(joule.Megajoules).Joules, MegajoulesTolerance);
            AssertEx.EqualTolerance(1, Energy.FromMegawattHours(joule.MegawattHours).Joules, MegawattHoursTolerance);
            AssertEx.EqualTolerance(1, Energy.FromThermsEc(joule.ThermsEc).Joules, ThermsEcTolerance);
            AssertEx.EqualTolerance(1, Energy.FromThermsImperial(joule.ThermsImperial).Joules, ThermsImperialTolerance);
            AssertEx.EqualTolerance(1, Energy.FromThermsUs(joule.ThermsUs).Joules, ThermsUsTolerance);
            AssertEx.EqualTolerance(1, Energy.FromWattHours(joule.WattHours).Joules, WattHoursTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Energy v = Energy.FromJoules(1);
            AssertEx.EqualTolerance(-1, -v.Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, (Energy.FromJoules(3)-v).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, (v + v).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(10, (v*10).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(10, (10*v).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, (Energy.FromJoules(10)/5).Joules, JoulesTolerance);
            AssertEx.EqualTolerance(2, Energy.FromJoules(10)/Energy.FromJoules(5), JoulesTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Energy oneJoule = Energy.FromJoules(1);
            Energy twoJoules = Energy.FromJoules(2);

            Assert.True(oneJoule < twoJoules);
            Assert.True(oneJoule <= twoJoules);
            Assert.True(twoJoules > oneJoule);
            Assert.True(twoJoules >= oneJoule);

            Assert.False(oneJoule > twoJoules);
            Assert.False(oneJoule >= twoJoules);
            Assert.False(twoJoules < oneJoule);
            Assert.False(twoJoules <= oneJoule);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Equal(0, joule.CompareTo(joule));
            Assert.True(joule.CompareTo(Energy.Zero) > 0);
            Assert.True(Energy.Zero.CompareTo(joule) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Throws<ArgumentException>(() => joule.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Throws<ArgumentNullException>(() => joule.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            Energy a = Energy.FromJoules(1);
            Energy b = Energy.FromJoules(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            Energy v = Energy.FromJoules(1);
            Assert.True(v.Equals(Energy.FromJoules(1), Energy.FromJoules(JoulesTolerance)));
            Assert.False(v.Equals(Energy.Zero, Energy.FromJoules(JoulesTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.False(joule.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.False(joule.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(EnergyUnit.Undefined, Energy.Units);
        }

    }
}
