//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Linq;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Illuminance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class IlluminanceTestsBase
    {
        protected abstract double KiloluxInOneLux { get; }
        protected abstract double LuxInOneLux { get; }
        protected abstract double MegaluxInOneLux { get; }
        protected abstract double MilliluxInOneLux { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KiloluxTolerance { get { return 1e-5; } }
        protected virtual double LuxTolerance { get { return 1e-5; } }
        protected virtual double MegaluxTolerance { get { return 1e-5; } }
        protected virtual double MilliluxTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void LuxToIlluminanceUnits()
        {
            Illuminance lux = Illuminance.FromLux(1);
            AssertEx.EqualTolerance(KiloluxInOneLux, lux.Kilolux, KiloluxTolerance);
            AssertEx.EqualTolerance(LuxInOneLux, lux.Lux, LuxTolerance);
            AssertEx.EqualTolerance(MegaluxInOneLux, lux.Megalux, MegaluxTolerance);
            AssertEx.EqualTolerance(MilliluxInOneLux, lux.Millilux, MilliluxTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Kilolux).Kilolux, KiloluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Lux).Lux, LuxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Megalux).Megalux, MegaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.From(1, IlluminanceUnit.Millilux).Millilux, MilliluxTolerance);
        }

        [Fact]
        public void As()
        {
            var lux = Illuminance.FromLux(1);
            AssertEx.EqualTolerance(KiloluxInOneLux, lux.As(IlluminanceUnit.Kilolux), KiloluxTolerance);
            AssertEx.EqualTolerance(LuxInOneLux, lux.As(IlluminanceUnit.Lux), LuxTolerance);
            AssertEx.EqualTolerance(MegaluxInOneLux, lux.As(IlluminanceUnit.Megalux), MegaluxTolerance);
            AssertEx.EqualTolerance(MilliluxInOneLux, lux.As(IlluminanceUnit.Millilux), MilliluxTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var lux = Illuminance.FromLux(1);

            var kiloluxQuantity = lux.ToUnit(IlluminanceUnit.Kilolux);
            AssertEx.EqualTolerance(KiloluxInOneLux, (double)kiloluxQuantity.Value, KiloluxTolerance);
            Assert.Equal(IlluminanceUnit.Kilolux, kiloluxQuantity.Unit);

            var luxQuantity = lux.ToUnit(IlluminanceUnit.Lux);
            AssertEx.EqualTolerance(LuxInOneLux, (double)luxQuantity.Value, LuxTolerance);
            Assert.Equal(IlluminanceUnit.Lux, luxQuantity.Unit);

            var megaluxQuantity = lux.ToUnit(IlluminanceUnit.Megalux);
            AssertEx.EqualTolerance(MegaluxInOneLux, (double)megaluxQuantity.Value, MegaluxTolerance);
            Assert.Equal(IlluminanceUnit.Megalux, megaluxQuantity.Unit);

            var milliluxQuantity = lux.ToUnit(IlluminanceUnit.Millilux);
            AssertEx.EqualTolerance(MilliluxInOneLux, (double)milliluxQuantity.Value, MilliluxTolerance);
            Assert.Equal(IlluminanceUnit.Millilux, milliluxQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Illuminance lux = Illuminance.FromLux(1);
            AssertEx.EqualTolerance(1, Illuminance.FromKilolux(lux.Kilolux).Lux, KiloluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromLux(lux.Lux).Lux, LuxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromMegalux(lux.Megalux).Lux, MegaluxTolerance);
            AssertEx.EqualTolerance(1, Illuminance.FromMillilux(lux.Millilux).Lux, MilliluxTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Illuminance v = Illuminance.FromLux(1);
            AssertEx.EqualTolerance(-1, -v.Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, (Illuminance.FromLux(3)-v).Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, (v + v).Lux, LuxTolerance);
            AssertEx.EqualTolerance(10, (v*10).Lux, LuxTolerance);
            AssertEx.EqualTolerance(10, (10*v).Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, (Illuminance.FromLux(10)/5).Lux, LuxTolerance);
            AssertEx.EqualTolerance(2, Illuminance.FromLux(10)/Illuminance.FromLux(5), LuxTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Illuminance oneLux = Illuminance.FromLux(1);
            Illuminance twoLux = Illuminance.FromLux(2);

            Assert.True(oneLux < twoLux);
            Assert.True(oneLux <= twoLux);
            Assert.True(twoLux > oneLux);
            Assert.True(twoLux >= oneLux);

            Assert.False(oneLux > twoLux);
            Assert.False(oneLux >= twoLux);
            Assert.False(twoLux < oneLux);
            Assert.False(twoLux <= oneLux);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Illuminance lux = Illuminance.FromLux(1);
            Assert.Equal(0, lux.CompareTo(lux));
            Assert.True(lux.CompareTo(Illuminance.Zero) > 0);
            Assert.True(Illuminance.Zero.CompareTo(lux) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Illuminance lux = Illuminance.FromLux(1);
            Assert.Throws<ArgumentException>(() => lux.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Illuminance lux = Illuminance.FromLux(1);
            Assert.Throws<ArgumentNullException>(() => lux.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            Illuminance a = Illuminance.FromLux(1);
            Illuminance b = Illuminance.FromLux(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            Illuminance v = Illuminance.FromLux(1);
            Assert.True(v.Equals(Illuminance.FromLux(1), Illuminance.FromLux(LuxTolerance)));
            Assert.False(v.Equals(Illuminance.Zero, Illuminance.FromLux(LuxTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Illuminance lux = Illuminance.FromLux(1);
            Assert.False(lux.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Illuminance lux = Illuminance.FromLux(1);
            Assert.False(lux.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(IlluminanceUnit.Undefined, Illuminance.Units);
        }

    }
}
