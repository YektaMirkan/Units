//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToAngle
{
    public static class NumberToAngleExtensions
    {
        #region Arcminute

        /// <inheritdoc cref="Angle.FromArcminutes(UnitsNet.QuantityValue)" />
        public static Angle Arcminutes<T>(this T value) => Angle.FromArcminutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromArcminutes(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Arcminutes<T>(this T? value) where T : struct => Angle.FromArcminutes(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Arcsecond

        /// <inheritdoc cref="Angle.FromArcseconds(UnitsNet.QuantityValue)" />
        public static Angle Arcseconds<T>(this T value) => Angle.FromArcseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromArcseconds(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Arcseconds<T>(this T? value) where T : struct => Angle.FromArcseconds(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Centiradian

        /// <inheritdoc cref="Angle.FromCentiradians(UnitsNet.QuantityValue)" />
        public static Angle Centiradians<T>(this T value) => Angle.FromCentiradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromCentiradians(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Centiradians<T>(this T? value) where T : struct => Angle.FromCentiradians(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Deciradian

        /// <inheritdoc cref="Angle.FromDeciradians(UnitsNet.QuantityValue)" />
        public static Angle Deciradians<T>(this T value) => Angle.FromDeciradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromDeciradians(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Deciradians<T>(this T? value) where T : struct => Angle.FromDeciradians(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Degree

        /// <inheritdoc cref="Angle.FromDegrees(UnitsNet.QuantityValue)" />
        public static Angle Degrees<T>(this T value) => Angle.FromDegrees(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromDegrees(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Degrees<T>(this T? value) where T : struct => Angle.FromDegrees(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Gradian

        /// <inheritdoc cref="Angle.FromGradians(UnitsNet.QuantityValue)" />
        public static Angle Gradians<T>(this T value) => Angle.FromGradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromGradians(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Gradians<T>(this T? value) where T : struct => Angle.FromGradians(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Microdegree

        /// <inheritdoc cref="Angle.FromMicrodegrees(UnitsNet.QuantityValue)" />
        public static Angle Microdegrees<T>(this T value) => Angle.FromMicrodegrees(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromMicrodegrees(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Microdegrees<T>(this T? value) where T : struct => Angle.FromMicrodegrees(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Microradian

        /// <inheritdoc cref="Angle.FromMicroradians(UnitsNet.QuantityValue)" />
        public static Angle Microradians<T>(this T value) => Angle.FromMicroradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromMicroradians(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Microradians<T>(this T? value) where T : struct => Angle.FromMicroradians(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Millidegree

        /// <inheritdoc cref="Angle.FromMillidegrees(UnitsNet.QuantityValue)" />
        public static Angle Millidegrees<T>(this T value) => Angle.FromMillidegrees(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromMillidegrees(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Millidegrees<T>(this T? value) where T : struct => Angle.FromMillidegrees(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Milliradian

        /// <inheritdoc cref="Angle.FromMilliradians(UnitsNet.QuantityValue)" />
        public static Angle Milliradians<T>(this T value) => Angle.FromMilliradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromMilliradians(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Milliradians<T>(this T? value) where T : struct => Angle.FromMilliradians(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Nanodegree

        /// <inheritdoc cref="Angle.FromNanodegrees(UnitsNet.QuantityValue)" />
        public static Angle Nanodegrees<T>(this T value) => Angle.FromNanodegrees(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromNanodegrees(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Nanodegrees<T>(this T? value) where T : struct => Angle.FromNanodegrees(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Nanoradian

        /// <inheritdoc cref="Angle.FromNanoradians(UnitsNet.QuantityValue)" />
        public static Angle Nanoradians<T>(this T value) => Angle.FromNanoradians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromNanoradians(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Nanoradians<T>(this T? value) where T : struct => Angle.FromNanoradians(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Radian

        /// <inheritdoc cref="Angle.FromRadians(UnitsNet.QuantityValue)" />
        public static Angle Radians<T>(this T value) => Angle.FromRadians(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromRadians(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Radians<T>(this T? value) where T : struct => Angle.FromRadians(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Revolution

        /// <inheritdoc cref="Angle.FromRevolutions(UnitsNet.QuantityValue)" />
        public static Angle Revolutions<T>(this T value) => Angle.FromRevolutions(Convert.ToDouble(value));

        /// <inheritdoc cref="Angle.FromRevolutions(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Angle? Revolutions<T>(this T? value) where T : struct => Angle.FromRevolutions(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
