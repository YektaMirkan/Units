//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToHeatFlux
{
    public static class NumberToHeatFluxExtensions
    {
        #region BtuPerHourSquareFoot

        /// <inheritdoc cref="HeatFlux.FromBtusPerHourSquareFoot(UnitsNet.QuantityValue)" />
        public static HeatFlux BtusPerHourSquareFoot<T>(this T value) => HeatFlux.FromBtusPerHourSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromBtusPerHourSquareFoot(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? BtusPerHourSquareFoot<T>(this T? value) where T : struct => HeatFlux.FromBtusPerHourSquareFoot(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region BtuPerMinuteSquareFoot

        /// <inheritdoc cref="HeatFlux.FromBtusPerMinuteSquareFoot(UnitsNet.QuantityValue)" />
        public static HeatFlux BtusPerMinuteSquareFoot<T>(this T value) => HeatFlux.FromBtusPerMinuteSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromBtusPerMinuteSquareFoot(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? BtusPerMinuteSquareFoot<T>(this T? value) where T : struct => HeatFlux.FromBtusPerMinuteSquareFoot(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region BtuPerSecondSquareFoot

        /// <inheritdoc cref="HeatFlux.FromBtusPerSecondSquareFoot(UnitsNet.QuantityValue)" />
        public static HeatFlux BtusPerSecondSquareFoot<T>(this T value) => HeatFlux.FromBtusPerSecondSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromBtusPerSecondSquareFoot(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? BtusPerSecondSquareFoot<T>(this T? value) where T : struct => HeatFlux.FromBtusPerSecondSquareFoot(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region BtuPerSecondSquareInch

        /// <inheritdoc cref="HeatFlux.FromBtusPerSecondSquareInch(UnitsNet.QuantityValue)" />
        public static HeatFlux BtusPerSecondSquareInch<T>(this T value) => HeatFlux.FromBtusPerSecondSquareInch(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromBtusPerSecondSquareInch(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? BtusPerSecondSquareInch<T>(this T? value) where T : struct => HeatFlux.FromBtusPerSecondSquareInch(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CaloriePerSecondSquareCentimeter

        /// <inheritdoc cref="HeatFlux.FromCaloriesPerSecondSquareCentimeter(UnitsNet.QuantityValue)" />
        public static HeatFlux CaloriesPerSecondSquareCentimeter<T>(this T value) => HeatFlux.FromCaloriesPerSecondSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromCaloriesPerSecondSquareCentimeter(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? CaloriesPerSecondSquareCentimeter<T>(this T? value) where T : struct => HeatFlux.FromCaloriesPerSecondSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region CentiwattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static HeatFlux CentiwattsPerSquareMeter<T>(this T value) => HeatFlux.FromCentiwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? CentiwattsPerSquareMeter<T>(this T? value) where T : struct => HeatFlux.FromCentiwattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region DeciwattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static HeatFlux DeciwattsPerSquareMeter<T>(this T value) => HeatFlux.FromDeciwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? DeciwattsPerSquareMeter<T>(this T? value) where T : struct => HeatFlux.FromDeciwattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilocaloriePerHourSquareMeter

        /// <inheritdoc cref="HeatFlux.FromKilocaloriesPerHourSquareMeter(UnitsNet.QuantityValue)" />
        public static HeatFlux KilocaloriesPerHourSquareMeter<T>(this T value) => HeatFlux.FromKilocaloriesPerHourSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromKilocaloriesPerHourSquareMeter(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? KilocaloriesPerHourSquareMeter<T>(this T? value) where T : struct => HeatFlux.FromKilocaloriesPerHourSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilocaloriePerSecondSquareCentimeter

        /// <inheritdoc cref="HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(UnitsNet.QuantityValue)" />
        public static HeatFlux KilocaloriesPerSecondSquareCentimeter<T>(this T value) => HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? KilocaloriesPerSecondSquareCentimeter<T>(this T? value) where T : struct => HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilowattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static HeatFlux KilowattsPerSquareMeter<T>(this T value) => HeatFlux.FromKilowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? KilowattsPerSquareMeter<T>(this T? value) where T : struct => HeatFlux.FromKilowattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MicrowattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static HeatFlux MicrowattsPerSquareMeter<T>(this T value) => HeatFlux.FromMicrowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? MicrowattsPerSquareMeter<T>(this T? value) where T : struct => HeatFlux.FromMicrowattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region MilliwattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static HeatFlux MilliwattsPerSquareMeter<T>(this T value) => HeatFlux.FromMilliwattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? MilliwattsPerSquareMeter<T>(this T? value) where T : struct => HeatFlux.FromMilliwattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NanowattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static HeatFlux NanowattsPerSquareMeter<T>(this T value) => HeatFlux.FromNanowattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? NanowattsPerSquareMeter<T>(this T? value) where T : struct => HeatFlux.FromNanowattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PoundForcePerFootSecond

        /// <inheritdoc cref="HeatFlux.FromPoundsForcePerFootSecond(UnitsNet.QuantityValue)" />
        public static HeatFlux PoundsForcePerFootSecond<T>(this T value) => HeatFlux.FromPoundsForcePerFootSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromPoundsForcePerFootSecond(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? PoundsForcePerFootSecond<T>(this T? value) where T : struct => HeatFlux.FromPoundsForcePerFootSecond(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PoundPerSecondCubed

        /// <inheritdoc cref="HeatFlux.FromPoundsPerSecondCubed(UnitsNet.QuantityValue)" />
        public static HeatFlux PoundsPerSecondCubed<T>(this T value) => HeatFlux.FromPoundsPerSecondCubed(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromPoundsPerSecondCubed(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? PoundsPerSecondCubed<T>(this T? value) where T : struct => HeatFlux.FromPoundsPerSecondCubed(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region WattPerSquareFoot

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareFoot(UnitsNet.QuantityValue)" />
        public static HeatFlux WattsPerSquareFoot<T>(this T value) => HeatFlux.FromWattsPerSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareFoot(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? WattsPerSquareFoot<T>(this T? value) where T : struct => HeatFlux.FromWattsPerSquareFoot(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region WattPerSquareInch

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareInch(UnitsNet.QuantityValue)" />
        public static HeatFlux WattsPerSquareInch<T>(this T value) => HeatFlux.FromWattsPerSquareInch(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareInch(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? WattsPerSquareInch<T>(this T? value) where T : struct => HeatFlux.FromWattsPerSquareInch(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region WattPerSquareMeter

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(UnitsNet.QuantityValue)" />
        public static HeatFlux WattsPerSquareMeter<T>(this T value) => HeatFlux.FromWattsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(UnitsNet.QuantityValue)" />
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static HeatFlux? WattsPerSquareMeter<T>(this T? value) where T : struct => HeatFlux.FromWattsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
