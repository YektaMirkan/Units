//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In computing and telecommunications, a unit of information is the capacity of some standard data storage system or communication channel, used to measure the capacities of other systems and channels. In information theory, units of information are also used to measure the information contents or entropy of random variables.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    public partial struct Information : IComparable, IComparable<Information>
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public decimal Value => _value;

        #region Nullable From Methods

        /// <summary>
        ///     Get nullable Information from nullable Bits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromBits(QuantityValue? bits)
        {
            return bits.HasValue ? FromBits(bits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Bytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromBytes(QuantityValue? bytes)
        {
            return bytes.HasValue ? FromBytes(bytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Exabits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromExabits(QuantityValue? exabits)
        {
            return exabits.HasValue ? FromExabits(exabits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Exabytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromExabytes(QuantityValue? exabytes)
        {
            return exabytes.HasValue ? FromExabytes(exabytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Exbibits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromExbibits(QuantityValue? exbibits)
        {
            return exbibits.HasValue ? FromExbibits(exbibits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Exbibytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromExbibytes(QuantityValue? exbibytes)
        {
            return exbibytes.HasValue ? FromExbibytes(exbibytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Gibibits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromGibibits(QuantityValue? gibibits)
        {
            return gibibits.HasValue ? FromGibibits(gibibits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Gibibytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromGibibytes(QuantityValue? gibibytes)
        {
            return gibibytes.HasValue ? FromGibibytes(gibibytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Gigabits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromGigabits(QuantityValue? gigabits)
        {
            return gigabits.HasValue ? FromGigabits(gigabits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Gigabytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromGigabytes(QuantityValue? gigabytes)
        {
            return gigabytes.HasValue ? FromGigabytes(gigabytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Kibibits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromKibibits(QuantityValue? kibibits)
        {
            return kibibits.HasValue ? FromKibibits(kibibits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Kibibytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromKibibytes(QuantityValue? kibibytes)
        {
            return kibibytes.HasValue ? FromKibibytes(kibibytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Kilobits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromKilobits(QuantityValue? kilobits)
        {
            return kilobits.HasValue ? FromKilobits(kilobits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Kilobytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromKilobytes(QuantityValue? kilobytes)
        {
            return kilobytes.HasValue ? FromKilobytes(kilobytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Mebibits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromMebibits(QuantityValue? mebibits)
        {
            return mebibits.HasValue ? FromMebibits(mebibits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Mebibytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromMebibytes(QuantityValue? mebibytes)
        {
            return mebibytes.HasValue ? FromMebibytes(mebibytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Megabits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromMegabits(QuantityValue? megabits)
        {
            return megabits.HasValue ? FromMegabits(megabits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Megabytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromMegabytes(QuantityValue? megabytes)
        {
            return megabytes.HasValue ? FromMegabytes(megabytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Pebibits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromPebibits(QuantityValue? pebibits)
        {
            return pebibits.HasValue ? FromPebibits(pebibits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Pebibytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromPebibytes(QuantityValue? pebibytes)
        {
            return pebibytes.HasValue ? FromPebibytes(pebibytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Petabits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromPetabits(QuantityValue? petabits)
        {
            return petabits.HasValue ? FromPetabits(petabits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Petabytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromPetabytes(QuantityValue? petabytes)
        {
            return petabytes.HasValue ? FromPetabytes(petabytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Tebibits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromTebibits(QuantityValue? tebibits)
        {
            return tebibits.HasValue ? FromTebibits(tebibits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Tebibytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromTebibytes(QuantityValue? tebibytes)
        {
            return tebibytes.HasValue ? FromTebibytes(tebibytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Terabits.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromTerabits(QuantityValue? terabits)
        {
            return terabits.HasValue ? FromTerabits(terabits.Value) : default(Information?);
        }

        /// <summary>
        ///     Get nullable Information from nullable Terabytes.
        /// </summary>
        [Obsolete("Nullable type support is obsolete and will be removed in a future release.")]
        public static Information? FromTerabytes(QuantityValue? terabytes)
        {
            return terabytes.HasValue ? FromTerabytes(terabytes.Value) : default(Information?);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="InformationUnit" /> to <see cref="Information" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Information unit value.</returns>
        [Obsolete("Nullable type support has been deprecated and will be removed in a future release.")]
        public static Information? From(QuantityValue? value, InformationUnit fromUnit)
        {
            return value.HasValue ? new Information((decimal)value.Value, fromUnit) : default(Information?);
        }

        #endregion

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(InformationUnit unit, [CanBeNull] IFormatProvider provider)
        {
            provider = provider ?? UnitSystem.DefaultCulture;

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #region Arithmetic Operators

        public static Information operator -(Information right)
        {
            return new Information(-right.Value, right.Unit);
        }

        public static Information operator +(Information left, Information right)
        {
            return new Information(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Information operator -(Information left, Information right)
        {
            return new Information(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Information operator *(decimal left, Information right)
        {
            return new Information(left * right.Value, right.Unit);
        }

        public static Information operator *(Information left, decimal right)
        {
            return new Information(left.Value * right, left.Unit);
        }

        public static Information operator /(Information left, decimal right)
        {
            return new Information(left.Value / right, left.Unit);
        }

        public static double operator /(Information left, Information right)
        {
            return left.Bits / right.Bits;
        }

        #endregion

        public static bool operator <=(Information left, Information right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Information left, Information right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Information left, Information right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Information left, Information right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        public static bool operator ==(Information left, Information right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        public static bool operator !=(Information left, Information right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Information Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.Parse<Information, InformationUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    InformationUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromBits(x.Bits + y.Bits));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Information result)
        {
            provider = provider ?? UnitSystem.DefaultCulture;

            try
            {
                result = Parse(str, provider);
                return true;
            }
            catch
            {
                result = default(Information);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from .NET Framework targets.")]
        public static InformationUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static InformationUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<InformationUnit>(str.Trim());

            if (unit == InformationUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized InformationUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <returns>String representation.</returns>
        public string ToString(InformationUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return ToString(unit, provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(InformationUnit unit, [CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(InformationUnit unit, [CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? UnitSystem.DefaultCulture;

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion
    }
}
